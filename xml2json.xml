<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="text" encoding="utf-8"/>
	<xsl:strip-space elements="*" />
 
    <xsl:template match="/*[node()]">
        <xsl:text>[</xsl:text>
		<xsl:apply-templates select="." mode="detect" />
        <xsl:text>]</xsl:text>
    </xsl:template>
 
    <xsl:template match="*" mode="detect">
        <xsl:choose>
            <xsl:when test="count(./child::*) > 0 or count(@*) > 0">
                <xsl:text>{</xsl:text>
				<xsl:text>"</xsl:text>
				<xsl:value-of select="name()"/>
				<xsl:text>" : </xsl:text>
				<xsl:apply-templates select="." mode="obj-content" />
				<xsl:text>}</xsl:text>
                <xsl:if test="count(following-sibling::*) &gt; 0">
					<xsl:text>, </xsl:text>
				</xsl:if>
            </xsl:when>
            <xsl:when test="count(./child::*) = 0">
                <xsl:text>{ "</xsl:text>
				<xsl:value-of select="name()"/>
				<xsl:text>" : </xsl:text>
					<xsl:choose>
						<xsl:when test=". =''">
							<xsl:text>[]</xsl:text>
						</xsl:when>
						<xsl:when test="number(.) = .">
							<xsl:apply-templates select="."/>
						</xsl:when>
						<xsl:when test=". ='true'">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test=". ='false'">
							<xsl:text>false</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text>"</xsl:text>	
							<xsl:apply-templates select="."/>
							<xsl:text>"</xsl:text>	
						</xsl:otherwise>
					</xsl:choose>
				<xsl:text>}</xsl:text>
                <xsl:if test="count(following-sibling::*) &gt; 0">
					<xsl:text>, </xsl:text>
				</xsl:if>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
 
    <xsl:template match="*" mode="obj-content">
        <xsl:text>[</xsl:text>
		<xsl:if test="@*">
			<xsl:text>{</xsl:text>	
			<xsl:apply-templates select="@*" mode="attr" />
			<xsl:text>}</xsl:text>
		</xsl:if>
		<xsl:if test="count(@*) &gt; 0 and (count(child::*) &gt; 0 or text())">
			<xsl:text>, </xsl:text>
		</xsl:if>	
		<xsl:if test="(count(child::*) &gt; 0 and @*) or  (count(child::*) &gt; 0 and not(@*))">
			<xsl:choose>
				<xsl:when test="text()">
					<xsl:for-each-group select="node()" 
						group-adjacent="boolean(self::b|self::i|self::sub|self::text())">
						<xsl:choose>
							<xsl:when test="current-grouping-key()">
								<xsl:text>"</xsl:text>	
									<xsl:apply-templates select="current-group()" />
								<xsl:text>"</xsl:text>	
							</xsl:when>	
							<xsl:otherwise>
								<xsl:apply-templates select="current-group()" mode="detect"/>
							</xsl:otherwise>			
						</xsl:choose> 
						<xsl:if test="position() &lt; last()">
							<xsl:text>, </xsl:text>	
						</xsl:if>
					</xsl:for-each-group>
				</xsl:when>
				<xsl:otherwise>
					<xsl:apply-templates select="./*" mode="detect" />
				</xsl:otherwise>
			</xsl:choose> 	
        </xsl:if>
		<xsl:if test="count(child::*) = 0 and text() and not(@*)">
			<xsl:text>{</xsl:text>	
				<xsl:text>"</xsl:text>
				<xsl:value-of select="name()"/>
				<xsl:text>" : "</xsl:text>
				<xsl:value-of select="text()"/>
				<xsl:text>"</xsl:text>
			<xsl:text>}</xsl:text>	
		</xsl:if>
		<xsl:if test="count(child::*) = 0 and text() and @*">	
			<xsl:choose>
				<xsl:when test=". =''">
					<xsl:text>[]</xsl:text>
				</xsl:when>
				<xsl:when test="number(.) = .">
					<xsl:apply-templates select="."/>
				</xsl:when>
				<xsl:when test=". ='true'">
					<xsl:text>true</xsl:text>
				</xsl:when>
				<xsl:when test=". ='false'">
					<xsl:text>false</xsl:text>
				</xsl:when>
				<xsl:otherwise>
					<xsl:text>"</xsl:text>	
					<xsl:value-of select="text()"/>
					<xsl:text>"</xsl:text>	
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
        <xsl:text>]</xsl:text>
        <xsl:if test="position() &lt; last()">
			<xsl:text>, </xsl:text>	
		</xsl:if>
    </xsl:template>
 
    <xsl:template match="@*" mode="attr">
		<xsl:text>"@</xsl:text>
		<xsl:value-of select="name()"/>
		<xsl:text>" : "</xsl:text>
		<xsl:value-of select="."/>
		<xsl:text>"</xsl:text>
        <xsl:if test="position() &lt; last()">
			<xsl:text>, </xsl:text>
		</xsl:if>
    </xsl:template>
 
    <xsl:template match="node/@TEXT | text()" name="removeBreaks">
        <xsl:param name="pText" select="normalize-space(.)"/>
        <xsl:choose>
            <xsl:when test="not(contains($pText, '&#xA;'))">
				<xsl:copy-of select="$pText"/>
			</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="concat(substring-before($pText, '&#xD;&#xA;'), ' ')"/>
                <xsl:call-template name="removeBreaks">
                    <xsl:with-param name="pText" 
										select="substring-after($pText, '&#xD;&#xA;')"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
	
</xsl:stylesheet>
